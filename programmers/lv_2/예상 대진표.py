https://programmers.co.kr/learn/courses/30/lessons/12985

2를 나눠서 같은 같이 되는 위치를 확인
단, 1을 더해주는데 이유는 2를 나눠서 자리수를 맞춰주기 위해서임
1, 2 의 경우 2를 나누면 0, 1
(1+1), (2+1) 의 경우 2를 나누면 1, 1으로 값이 같게 됨

def solution(n,a,b): 
	answer = 0
	while a != b: 
		answer += 1
        # 1을 더해서 2로 나누었을 때, 자리수를 맞춰줌
        # 예) 1, 2의 경우는 2, 3으로 해서 나눴을때 몫이 1이 되도록
		a, b = (a+1)//2, (b+1)//2
	return answer


x^y : x와 y의 비트별 배타적 or (exclusive or)
예) 4^7 : 4 ('100') ^ 7 ('111') 으로 3 ('11')이 계산됨
.bit_length() : 해당 비트의 자리 수
예) '11' : 2
풀이 : ((a-1)^(b-1)).bit_length()
성립 이유
1을 빼주는 이유는 2를 나눴을 때, 같은 자리수를 맞추기 위해서임
1을 빼지 않은 경우
4('100') -> 2('10') -> 1('1') -> 0('0')
7('111') -> 4('100') -> 2('10') -> 1('1')
1을 뺀 경우
3('11') -> 2('10') -> 1('1') -> 0('0')
6('110') -> 3('11') -> 2('10') -> 1('1')
위를 좀 더 자세히 설명하면, 12, 34, 5~8은 1을 빼도 각각 같은 자리수를 가짐
결과적으로 봤을때는 이해를 하겠는데, 이론적으로는 명확하지 않아서 이해하신 분은 코멘트 부탁드립니다!!

def solution(n,a,b):
    return ((a-1)^(b-1)).bit_length()